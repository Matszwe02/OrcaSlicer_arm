name: Build Docker Image

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'OrcaSlicer Release Tag to build'
        required: false
        type: string

jobs:
  get-release-version:
    runs-on: ubuntu-latest
    outputs:
      NEWEST_RELEASE_VERSION: ${{ steps.get_version.outputs.NEWEST_RELEASE_VERSION }}
      RELEASE_VERSION: ${{ steps.set_release_version.outputs.FINAL_RELEASE_VERSION }}
    steps:
      - name: Get OrcaSlicer release version
        id: get_version
        run: |
          echo "Checking for release tag input..."
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            NEWEST_RELEASE_VERSION="${{ github.event.inputs.release_tag }}"
            echo "Using release tag from input: $NEWEST_RELEASE_VERSION"
          else
            echo "Fetching latest release from GitHub API..."
            LATEST_RELEASE=$(wget -q -O- "https://api.github.com/repos/SoftFever/OrcaSlicer/releases/latest" | grep -oP '"tag_name": "\K(.*?)",$' | head -n 1 | sed 's/",$//')
            NEWEST_RELEASE_VERSION="$LATEST_RELEASE"
            echo "Latest release found: $NEWEST_RELEASE_VERSION"
          fi
          echo "NEWEST_RELEASE_VERSION=$NEWEST_RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "Set NEWEST_RELEASE_VERSION to $NEWEST_RELEASE_VERSION"

      - name: Check if release image already exists
        id: check_image
        if: ${{ github.event.inputs.release_tag == '' }}
        run: |
          echo "Checking if Docker image for version ${{ steps.get_version.outputs.NEWEST_RELEASE_VERSION }} already exists..."
          if docker manifest inspect matszwe02/orcaslicer-arm:${{ steps.get_version.outputs.NEWEST_RELEASE_VERSION }} >/dev/null 2>&1; then
            echo "IMAGE_EXISTS=true" >> $GITHUB_OUTPUT
            echo "${{ steps.get_version.outputs.NEWEST_RELEASE_VERSION }} already built."
          else
            echo "IMAGE_EXISTS=false" >> $GITHUB_OUTPUT
            echo "Building ${{ steps.get_version.outputs.NEWEST_RELEASE_VERSION }}."
          fi
        continue-on-error: true

      - name: Set final release version
        id: set_release_version
        run: |
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            FINAL_RELEASE_VERSION="${{ github.event.inputs.release_tag }}"
            echo "Using release tag from input: $FINAL_RELEASE_VERSION"
          elif [ "${{ steps.check_image.outputs.IMAGE_EXISTS }}" == "true" ]; then
            FINAL_RELEASE_VERSION="nightly-builds"
            echo "Image already exists, setting FINAL_RELEASE_VERSION to nightly-builds."
          else
            FINAL_RELEASE_VERSION="${{ steps.get_version.outputs.NEWEST_RELEASE_VERSION }}"
            echo "Image does not exist, setting FINAL_RELEASE_VERSION to ${{ steps.get_version.outputs.NEWEST_RELEASE_VERSION }}."
          fi
          echo "FINAL_RELEASE_VERSION=$FINAL_RELEASE_VERSION" >> $GITHUB_OUTPUT

  build-orcaslicer-artifact:
    needs: get-release-version
    runs-on: ubuntu-24.04-arm
    outputs:
      artifact_name: OrcaSlicer_Linux_arm64
      artifact_path: ./build
    steps:
      - name: Clone repository
        run: wget https://github.com/SoftFever/OrcaSlicer/archive/refs/tags/${{ needs.get-release-version.outputs.RELEASE_VERSION }}.tar.gz -O ./OrcaSlicer.tar.gz && tar -xzvf ./OrcaSlicer.tar.gz --strip-components=1

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.28"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse-dev m4 libunwind-dev libgstreamer1.0-dev

      - name: Detect build script
        id: detect_build_script
        run: |
          if [ -f BuildLinux.sh ]; then
            echo "build_script=BuildLinux.sh" >> $GITHUB_OUTPUT
          elif [ -f build_linux.sh ]; then
            echo "build_script=build_linux.sh" >> $GITHUB_OUTPUT
          else
            echo "No build script found!"
            exit 1
          fi

      - name: Apply patches
        shell: bash
        run: |
          if [ -f deps/TIFF/TIFF.cmake ]; then
            sed -i '/URL_HASH SHA256=c56edfacef0a60c0de3e6489194fcb2f24c03dbb550a8a7de5938642d045bd32/d' deps/TIFF/TIFF.cmake
            echo "Fixing that dumb TIFF dependency"
          fi
          if [ -f deps/MPFR/MPFR.cmake ]; then
            sed -i 's|https://www.mpfr.org/mpfr-current/mpfr-4.2.1.tar.bz2|https://www.mpfr.org/mpfr-current/mpfr-4.2.2.tar.bz2|g' deps/MPFR/MPFR.cmake
            sed -i '/URL_HASH SHA256=b9df93635b20e4089c29623b19420c4ac848a1b29df1cfd59f26cab0d2666aa0/d' deps/MPFR/MPFR.cmake
            echo "Updating MPFR dependency to 4.2.2 and removing hash check"
          fi

      - name: Fix permissions
        shell: bash
        run: sudo chown $USER -R ./

      - name: Install dependencies from build_linux.sh
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/deps/build
          mkdir -p ${{ github.workspace }}/deps/build/destdir
          chmod +x ${{ steps.detect_build_script.outputs.build_script }}
          DEPS_EXTRA_BUILD_ARGS=-DCMAKE_SKIP_DOWNLOAD_VERIFY_HASH=ON
          sudo ./${{ steps.detect_build_script.outputs.build_script }} -ur

      - name: Build dependencies
        shell: bash
        run: |
          sudo ./${{ steps.detect_build_script.outputs.build_script }} -dr

      - name: Build slicer
        shell: bash
        env:
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/deps/build/destdir/usr/local
        run: |
          sudo ./${{ steps.detect_build_script.outputs.build_script }} -sr
          sudo cp resources/images/OrcaSlicer.png build/package/icon.png

      - name: Upload artifacts Ubuntu
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_Linux_arm64
          path: ./build/package

  build-and-push:
    needs: [build-orcaslicer-artifact, get-release-version]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download OrcaSlicer artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-orcaslicer-artifact.outputs.artifact_name }}
          path: ./downloaded_artifact

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container

      - name: Build and push Docker image (release)
        run: |
          mkdir ./package
          cp -r ./downloaded_artifact/* ./package
          sudo apt-get update && sudo apt-get install -y tree && tree -L 3
          docker buildx build --platform linux/arm64 \
            --build-arg VERSION=${{ needs.get-release-version.outputs.RELEASE_VERSION }} \
            -f Dockerfile.precompiled \
            -t matszwe02/orcaslicer-arm:${{ needs.get-release-version.outputs.RELEASE_VERSION }} \
            -t matszwe02/orcaslicer-arm:latest \
            --push .
