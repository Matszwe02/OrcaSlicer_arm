name: Build Docker Image

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'OrcaSlicer Release Tag to build'
        required: false
        type: string

jobs:
  build-orcaslicer-artifact:
    runs-on: ubuntu-22.04-arm
    outputs:
      artifact_name: OrcaSlicer_Linux_arm64
      artifact_path: ./build/package
    steps:
      - name: Get OrcaSlicer release version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            echo "RELEASE_VERSION=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
          else
            LATEST_RELEASE=$(wget -q -O- "https://api.github.com/repos/SoftFever/OrcaSlicer/releases/latest" | grep -oP '"tag_name": "\K(.*?)",$' | head -n 1 | sed 's/",$//')
            echo "RELEASE_VERSION=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          fi
      - name: Clone repository
        # run: git clone --branch ${{ steps.get_version.outputs.RELEASE_VERSION }} https://github.com/softfever/orcaslicer.git .
        run: wget https://github.com/SoftFever/OrcaSlicer/archive/refs/tags/${{ steps.get_version.outputs.RELEASE_VERSION }}.tar.gz -O ./OrcaSlicer.tar.gz && tar -xzvf ./OrcaSlicer.tar.gz --strip-components=1

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.28"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse-dev m4 libunwind-dev libgstreamer1.0-dev

      - name: Detect build script
        id: detect_build_script
        run: |
          if [ -f BuildLinux.sh ]; then
            echo "build_script=BuildLinux.sh" >> $GITHUB_OUTPUT
          elif [ -f build_linux.sh ]; then
            echo "build_script=build_linux.sh" >> $GITHUB_OUTPUT
          else
            echo "No build script found!"
            exit 1
          fi

      - name: Patch install script
        run: |
          sed -i 's|cmake -S deps -B deps/build ${CMAKE_C_CXX_COMPILER_CLANG} -G Ninja ${COLORED_OUTPUT} ${BUILD_ARGS}|cmake -S deps -B deps/build ${CMAKE_C_CXX_COMPILER_CLANG} -G Ninja ${COLORED_OUTPUT} ${BUILD_ARGS} -DCMAKE_SKIP_DOWNLOAD_VERIFY_HASH=ON|g' ./${{ steps.detect_build_script.outputs.build_script }} && \
          cat ./${{ steps.detect_build_script.outputs.build_script }}

      - name: Fix permissions
        shell: bash
        run: sudo chown $USER -R ./

      - name: Install dependencies from build_linux.sh
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/deps/build
          mkdir -p ${{ github.workspace }}/deps/build/destdir
          chmod +x ${{ steps.detect_build_script.outputs.build_script }}
          sudo ./${{ steps.detect_build_script.outputs.build_script }} -ur

      - name: Build dependencies
        shell: bash
        run: |
          sudo ./${{ steps.detect_build_script.outputs.build_script }} -dr

      - name: Build slicer
        shell: bash
        env:
          CMAKE_PREFIX_PATH: ${{ github.workspace }}/deps/build/destdir/usr/local
        run: sudo ./${{ steps.detect_build_script.outputs.build_script }} -sr

      - name: Upload artifacts Ubuntu
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_Linux_arm64
          path: ./build/package

  build-and-push:
    needs: build-orcaslicer-artifact
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get OrcaSlicer release version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.release_tag }}" ]; then
            echo "RELEASE_VERSION=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT
          else
            LATEST_RELEASE=$(wget -q -O- "https://api.github.com/repos/SoftFever/OrcaSlicer/releases/latest" | grep -oP '"tag_name": "\K(.*?)",$' | head -n 1 | sed 's/",$//')
            echo "RELEASE_VERSION=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          fi

      - name: Download OrcaSlicer artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-orcaslicer-artifact.outputs.artifact_name }}
          path: ./downloaded_artifact

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check if release image already exists
        id: check_image
        run: |
          if docker manifest inspect matszwe02/orcaslicer-arm:${{ steps.get_version.outputs.RELEASE_VERSION }} >/dev/null 2>&1; then
            echo "${{ steps.get_version.outputs.RELEASE_VERSION }} already built"
            echo "SKIP_BUILD=true" >> $GITHUB_OUTPUT
          else
            echo "SKIP_BUILD=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Build and push Docker image (release)
        if: steps.check_image.outputs.SKIP_BUILD == 'false'
        run: |
          cp -r ./downloaded_artifact/* .
          docker buildx build --platform linux/arm64 \
            --build-arg VERSION=${{ steps.get_version.outputs.RELEASE_VERSION }} \
            -f Dockerfile.precompiled \
            -t matszwe02/orcaslicer-arm:${{ steps.get_version.outputs.RELEASE_VERSION }} \
            -t latest \
            --push .
